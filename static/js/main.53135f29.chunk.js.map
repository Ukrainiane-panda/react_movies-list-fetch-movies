{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","addMovie","useState","setQuery","inputError","setInputError","isLoading","setIsLoading","setMovie","hendlerSubmit","event","a","preventDefault","response","Title","Plot","Poster","imdbID","normalizedMovie","finally","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","some","m","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53135f29.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl\n            || 'https://via.placeholder.com/360x270.png?text=no%20preview'}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=1ea001af';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\nimport './FindMovie.scss';\n\ninterface Props {\n  addMovie: (movie: Movie) => void\n}\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [inputError, setInputError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>();\n\n  const hendlerSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    await getMovie(query)\n      .then(response => {\n        if ('Title' in response) {\n          const {\n            Title, Plot, Poster, imdbID,\n          } = response as MovieData;\n\n          if (imdbID) {\n            const normalizedMovie: Movie = {\n              title: Title,\n              description: Plot,\n              imgUrl: Poster !== 'N/A' ? Poster : '',\n              imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n              imdbId: imdbID,\n            };\n\n            setMovie(normalizedMovie);\n          } else {\n            setInputError(true);\n          }\n        } else {\n          setInputError(true);\n        }\n      })\n      .catch(() => setInputError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const hendlerQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setInputError(false);\n  };\n\n  const handleClearMovie = () => {\n    setQuery('');\n    setMovie(null);\n  };\n\n  const handleAdd = () => {\n    if (movie) {\n      addMovie(movie);\n    }\n\n    handleClearMovie();\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={hendlerSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to query\"\n              className={classNames('input', { 'is-dander': inputError })}\n              value={query}\n              onChange={hendlerQuery}\n            />\n          </div>\n          {inputError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"queryButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query || isLoading}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handlerAdd = (movie: Movie): void => {\n    if (!movies.some(m => m.imdbId === movie.imdbId)) {\n      setMovies(prev => [...prev, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={handlerAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}